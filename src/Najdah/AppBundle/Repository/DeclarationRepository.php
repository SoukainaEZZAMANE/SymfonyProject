<?php

namespace Najdah\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * DeclarationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DeclarationRepository extends EntityRepository {

    // retourner le nombre de notifications
    public function getNomberNoticeNomber() {
        //getDoctrine()->getManager()
        $query = $this->getEntityManager()
                ->createQuery('SELECT count(d) from NajdahAppBundle:Declaration d,
                NajdahAppBundle:EtatDeclaration  e where e=d.etat and e.libelle=:lib')
                ->setParameter('lib', 'Nouvelle');

        $nbr = $query->getSingleScalarResult();
        return $nbr;
    }

    public function getLastNotice() {
        //getDoctrine()->getManager()
        $query = $this->getEntityManager()
                ->createQuery('SELECT d from NajdahAppBundle:Declaration d,
                NajdahAppBundle:EtatDeclaration  e where e=d.etat and e.libelle=:lib')
                ->setParameter('lib', 'Nouvelle');

        $lastNotice = $query->getResult();
        return $lastNotice;
    }

    public function declarationsMois() {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('d.date as dateDec', 'COUNT(d.id) as nombre')
                ->from('NajdahAppBundle:Declaration', 'd');

        $qb->andWhere('d.date BETWEEN :debut AND :fin')
                ->setParameter('debut', new \Datetime(date('Y-M') . '-01'))
                ->setParameter('fin', new \Datetime());

        /*
          $qb->where('d.date >= :dt')
          ->setParameter('dt', new \Datetime(date('Y-M-D') - 30));
         */
        $qb->groupBy('d.date');
        $qb->orderBy('d.date', 'DESC');

        $entites = $qb->getQuery()->getArrayResult();

        //if( $entites.length() == 0 )   return null;
        return $entites;
    }

    public function declarationsPar($critere) {
        switch ($critere):
            case 'jours':
                $req = "SELECT DAY(d.date) AS COL1, COUNT(d.id) AS COL2 
                    FROM NajdahAppBundle:Declaration d 
                    WHERE YEAR(d.date)=YEAR(CURRENT_DATE() )  
                    AND MONTH(d.date)=MONTH(CURRENT_DATE() ) 
                    GROUP BY COL1 
                    ORDER BY COL1 ASC";
                break;
            case 'mois':
                $req = "SELECT MONTH(d.date) AS COL1, COUNT(d.id) AS COL2 
                    FROM NajdahAppBundle:Declaration d 
                    WHERE YEAR(d.date)=YEAR(CURRENT_DATE() )
                    GROUP BY COL1 
                    ORDER BY COL1 ASC";
                break;
            case 'annees':
                $req = "SELECT YEAR(d.date) AS COL1, COUNT(d.id) AS COL2 
                    FROM NajdahAppBundle:Declaration d
                    GROUP BY COL1 
                    ORDER BY COL1 ASC";
                break;
        endswitch;


        $query = $this->_em->createQuery($req);
        $resultats = $query->getResult();
        return $resultats;
    }

    public function declarationsParType($type, $critere) {
        switch ($critere):
            case 'jours':
                $req = "SELECT DAY(d.date) AS COL1, COUNT(d.id) AS COL2 
                    FROM NajdahAppBundle:Declaration d, NajdahAppBundle:TypeDeclaration t 
                    WHERE d.type=t.id 
                    AND t.libelle='" . $type . "' 
                    AND YEAR(d.date)=YEAR(CURRENT_DATE() ) 
                    AND MONTH(d.date)=MONTH(CURRENT_DATE() ) 
                    GROUP BY COL1 
                    ORDER BY COL1 ASC";
                break;
            case 'mois':
                $req = "SELECT MONTH(d.date) AS COL1, COUNT(d.id) AS COL2 
                    FROM NajdahAppBundle:Declaration d, NajdahAppBundle:TypeDeclaration t 
                    WHERE d.type=t.id 
                    AND t.libelle='" . $type . "' 
                    AND YEAR(d.date)=YEAR(CURRENT_DATE() )
                    GROUP BY COL1 
                    ORDER BY COL1 ASC";
                break;
            case 'annees':
                $req = "SELECT YEAR(d.date) AS COL1, COUNT(d.id) AS COL2 
                    FROM NajdahAppBundle:Declaration d, NajdahAppBundle:TypeDeclaration t 
                    WHERE d.type=t.id 
                    AND t.libelle='" . $type . "' 
                    GROUP BY COL1 
                    ORDER BY COL1 ASC";
                break;
        endswitch;


        $query = $this->_em->createQuery($req);
        $resultats = $query->getResult();
        return $resultats;
    }

    //--------------------------------- Pour la déclaration par mois et par ville --------------------------------------------
    public function declarationParVille() {
        //getDoctrine()->getManager()
        $query = $this->getEntityManager()
                ->createQuery('SELECT count(d) as nbr, v.libelle ,month(d.date) as mois from NajdahAppBundle:Declaration d,
                NajdahAppBundle:Ville  v where v=d.ville group by mois,v.libelle');

        $parVille = $query->getResult();
        return $parVille;
    }

//------------------------------------  Nombre de tous les déclarations
    public function getNombreAllDeclaration() {
        //getDoctrine()->getManager()
        $query = $this->getEntityManager()
                ->createQuery('SELECT count(d) from NajdahAppBundle:Declaration d');

        $nbr = $query->getSingleScalarResult();
        return $nbr;
    }

}
